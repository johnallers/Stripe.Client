

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Stripe.Client.Sdk.Clients;
using Stripe.Client.Sdk.Models.Filters;


namespace Jefwork.Stripe.Sdk.Tests.Models.Filters
{
    [TestClass]
    public class AccountListFilterTests
    {
        private AccountListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<AccountListFilter>();
        }

        [TestMethod]
        public void AccountListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void AccountListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new AccountListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void AccountListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class AccountBankAccountListFilterTests
    {
        private AccountBankAccountListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<AccountBankAccountListFilter>();
        }

        [TestMethod]
        public void AccountBankAccountListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void AccountBankAccountListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new AccountBankAccountListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void AccountBankAccountListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class AccountCardListFilterTests
    {
        private AccountCardListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<AccountCardListFilter>();
        }

        [TestMethod]
        public void AccountCardListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void AccountCardListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new AccountCardListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void AccountCardListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class ActiveSubscriptionListFilterTests
    {
        private ActiveSubscriptionListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<ActiveSubscriptionListFilter>();
        }

        [TestMethod]
        public void ActiveSubscriptionListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void ActiveSubscriptionListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new ActiveSubscriptionListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void ActiveSubscriptionListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class ApplicationFeeListFilterTests
    {
        private ApplicationFeeListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<ApplicationFeeListFilter>();
        }

        [TestMethod]
        public void ApplicationFeeListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void ApplicationFeeListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new ApplicationFeeListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void ApplicationFeeListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class ApplicationFeeRefundListFilterTests
    {
        private ApplicationFeeRefundListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<ApplicationFeeRefundListFilter>();
        }

        [TestMethod]
        public void ApplicationFeeRefundListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void ApplicationFeeRefundListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new ApplicationFeeRefundListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void ApplicationFeeRefundListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class BalanceTransactionListFilterTests
    {
        private BalanceTransactionListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<BalanceTransactionListFilter>();
        }

        [TestMethod]
        public void BalanceTransactionListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void BalanceTransactionListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new BalanceTransactionListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void BalanceTransactionListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class BankAccountListFilterTests
    {
        private BankAccountListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<BankAccountListFilter>();
        }

        [TestMethod]
        public void BankAccountListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void BankAccountListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new BankAccountListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void BankAccountListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class BitcoinReceiverListFilterTests
    {
        private BitcoinReceiverListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<BitcoinReceiverListFilter>();
        }

        [TestMethod]
        public void BitcoinReceiverListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void BitcoinReceiverListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new BitcoinReceiverListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void BitcoinReceiverListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class ChargeListFilterTests
    {
        private ChargeListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<ChargeListFilter>();
        }

        [TestMethod]
        public void ChargeListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void ChargeListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new ChargeListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void ChargeListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class CouponListFilterTests
    {
        private CouponListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<CouponListFilter>();
        }

        [TestMethod]
        public void CouponListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void CouponListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new CouponListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void CouponListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class CustomerListFilterTests
    {
        private CustomerListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<CustomerListFilter>();
        }

        [TestMethod]
        public void CustomerListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void CustomerListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new CustomerListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void CustomerListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class CustomerBankAccountListFilterTests
    {
        private CustomerBankAccountListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<CustomerBankAccountListFilter>();
        }

        [TestMethod]
        public void CustomerBankAccountListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void CustomerBankAccountListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new CustomerBankAccountListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void CustomerBankAccountListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class CustomerCardListFilterTests
    {
        private CustomerCardListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<CustomerCardListFilter>();
        }

        [TestMethod]
        public void CustomerCardListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void CustomerCardListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new CustomerCardListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void CustomerCardListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class DisputeListFilterTests
    {
        private DisputeListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<DisputeListFilter>();
        }

        [TestMethod]
        public void DisputeListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void DisputeListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new DisputeListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void DisputeListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class EventListFilterTests
    {
        private EventListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<EventListFilter>();
        }

        [TestMethod]
        public void EventListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void EventListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new EventListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void EventListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class FileUploadListFilterTests
    {
        private FileUploadListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<FileUploadListFilter>();
        }

        [TestMethod]
        public void FileUploadListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void FileUploadListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new FileUploadListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void FileUploadListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class InvoiceListFilterTests
    {
        private InvoiceListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<InvoiceListFilter>();
        }

        [TestMethod]
        public void InvoiceListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void InvoiceListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new InvoiceListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void InvoiceListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class InvoiceItemListFilterTests
    {
        private InvoiceItemListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<InvoiceItemListFilter>();
        }

        [TestMethod]
        public void InvoiceItemListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void InvoiceItemListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new InvoiceItemListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void InvoiceItemListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class InvoiceLineItemListFilterTests
    {
        private InvoiceLineItemListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<InvoiceLineItemListFilter>();
        }

        [TestMethod]
        public void InvoiceLineItemListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void InvoiceLineItemListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new InvoiceLineItemListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void InvoiceLineItemListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class OrderListFilterTests
    {
        private OrderListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<OrderListFilter>();
        }

        [TestMethod]
        public void OrderListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void OrderListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new OrderListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void OrderListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class OrderItemListFilterTests
    {
        private OrderItemListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<OrderItemListFilter>();
        }

        [TestMethod]
        public void OrderItemListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void OrderItemListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new OrderItemListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void OrderItemListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class PlanListFilterTests
    {
        private PlanListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<PlanListFilter>();
        }

        [TestMethod]
        public void PlanListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void PlanListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new PlanListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void PlanListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class ProductListFilterTests
    {
        private ProductListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<ProductListFilter>();
        }

        [TestMethod]
        public void ProductListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void ProductListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new ProductListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void ProductListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class RecipientListFilterTests
    {
        private RecipientListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<RecipientListFilter>();
        }

        [TestMethod]
        public void RecipientListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void RecipientListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new RecipientListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void RecipientListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class RecipientCardListFilterTests
    {
        private RecipientCardListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<RecipientCardListFilter>();
        }

        [TestMethod]
        public void RecipientCardListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void RecipientCardListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new RecipientCardListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void RecipientCardListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class RefundListFilterTests
    {
        private RefundListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<RefundListFilter>();
        }

        [TestMethod]
        public void RefundListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void RefundListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new RefundListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void RefundListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class SkuListFilterTests
    {
        private SkuListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<SkuListFilter>();
        }

        [TestMethod]
        public void SkuListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void SkuListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new SkuListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void SkuListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class TransferListFilterTests
    {
        private TransferListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<TransferListFilter>();
        }

        [TestMethod]
        public void TransferListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void TransferListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new TransferListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void TransferListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class TransferReversalListFilterTests
    {
        private TransferReversalListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<TransferReversalListFilter>();
        }

        [TestMethod]
        public void TransferReversalListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void TransferReversalListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new TransferReversalListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void TransferReversalListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
    [TestClass]
    public class UpcomingInvoiceListFilterTests
    {
        private UpcomingInvoiceListFilter _filter;

        [TestInitialize]
        public void Init()
        {
            _filter = GenFu.GenFu.New<UpcomingInvoiceListFilter>();
        }

        [TestMethod]
        public void UpcomingInvoiceListFilter_TheFieldIsRequired()
        {
            // Arrange 
            // _filter.TheField = null;

            // Act
            Func<IEnumerable<KeyValuePair<string, string>>> func = () => StripeClient.GetKeyValuePairs(_filter);

            // Assert
            func.Enumerating().ShouldThrow<ValidationException>();
        }

        [TestMethod]
        public void UpcomingInvoiceListFilter_DoesNotHaveRequiredFields()
        {
            // Arrange 
            _filter = new UpcomingInvoiceListFilter();

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(0);
        }

        [TestMethod]
        public void UpcomingInvoiceListFilter_GetAllKeys()
        {
            // Arrange

            // Act
            var keyValuePairs = StripeClient.GetKeyValuePairs(_filter).ToList();

            // Assert
            keyValuePairs.Should().HaveCount(3)
                .And.NotContain(x => x.Key == "account_id")
                .And.Contain(x => x.Key == "starting_after")
                .And.Contain(x => x.Key == "limit");
        }
    }
}

